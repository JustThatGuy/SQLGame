services:
  # Start the frontend application
  app:
    container_name: Frontend
    # Copy the Frontend folder into app
    build: Frontend
    # Environment variable just in case.
    environment:
      NODE_ENV: production
    # Open localhost ports
    ports:
      - 3000:3000
    # Copy volumes for file retention.
    volumes:
      - ".:/Frontend/"
      - /Frontend/node_modules
    depends_on:
      - server
  
  # Build the API server
  server:
    container_name: Backend
    # Based on the Backend folder
    build: Backend
    command: npm run start-watch
    environment:
      - DATABASE_DB=monster
      - DATABASE_USER=sql-gamer
      - DATABASE_PASSWORD=wachtwoord
      - DATABASE_HOST=database
      - NODE_ENV=development
    ports:
      - 8080:8080
    volumes:
      - ./Backend/src:/code/src:ro
      - ./Backend/package.json:/code/package.json
      - ./Backend/package-lock.json:/code/package-lock.json
    depends_on:
      - database
  
  # Set up PostgresSQL database
  database:
    container_name: PostgresSQL
    # Alpine based image for low memory usage
    image: postgres:latest
    restart: always
    # Bunch of config stuff
    environment:
      - POSTGRES_DB=monster
      - POSTGRES_USER=sql-gamer
      - POSTGRES_PASSWORD=wachtwoord
    ports:
      - 5432:5432
    volumes:
      - ./SQL:/docker-entrypoint-initdb.d/create_tables.sql
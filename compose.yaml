services:
  # Start the frontend application
  app:
    container_name: Frontend
    # Copy the Frontend folder into app
    build: Frontend
    # Environment variable just in case.
    environment:
      NODE_ENV: production
    # Open localhost ports
    ports:
      - 8228:3000
    # Copy volumes for file retention.
    volumes:
      - ".:/Frontend/"
    depends_on:
      - server
  
  # Build the API server
  server:
    container_name: Backend
    # Based on the Backend folder
    build: Backend
    environment:
      - DATABASE_DB=monster
      - DATABASE_USER=sqlgamer
      - DATABASE_PASSWORD=wachtwoord
      - DATABASE_HOST=database
      - NODE_ENV=development
    ports:
      - 8080:8080
    volumes:
      - ".:/Backend/"
      - ./Backend/package.json:/code/package.json
      - ./Backend/package-lock.json:/code/package-lock.json
    depends_on:
      - database
  
  # Set up PostgresSQL database
  database:
    container_name: PostgreSQL
    # Alpine based image for low memory usage
    image: postgres:latest
    restart: always
    # Bunch of config stuff
    environment:
      - POSTGRES_DB=monster
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - ./SQL/01_create_schema.sql:/docker-entrypoint-initdb.d/01_create_schema.sql
      - ./SQL/02_create_tables.sql:/docker-entrypoint-initdb.d/02_create_tables.sql
      - ./SQL/03_insert_data.sql:/docker-entrypoint-initdb.d/03_insert_data.sql
      - ./SQL/04_set_constraints.sql:/docker-entrypoint-initdb.d/04_set_constraints.sql
      - ./SQL/05_create_functions.sql:/docker-entrypoint-initdb.d/05_create_functions.sql
      - ./SQL/06_set_userprivileges.sql:/docker-entrypoint-initdb.d/06_set_userprivileges.sql
